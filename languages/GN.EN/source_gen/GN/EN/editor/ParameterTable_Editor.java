package GN.EN.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.RefCellCellProvider;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.nodeEditor.InlineCellProvider;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.lang.editor.table.runtime.TableModelFactory;
import jetbrains.mps.lang.editor.table.runtime.TableModel;
import jetbrains.mps.lang.editor.table.runtime.AbstractTableModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.editor.table.runtime.EditorCell_Table;
import jetbrains.mps.lang.editor.cellProviders.RefNodeCellProvider;
import jetbrains.mps.nodeEditor.cells.EditorCell_Property;
import jetbrains.mps.nodeEditor.cells.ModelAccessor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.util.EqualUtil;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.EmptyCellAction;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Indent;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandler;
import jetbrains.mps.smodel.action.NodeFactoryManager;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import jetbrains.mps.openapi.editor.cells.DefaultSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;

public class ParameterTable_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_90yilf_a(editorContext, node);
  }
  public EditorCell createInspectedCell(EditorContext editorContext, SNode node) {
    return this.createCollection_90yilf_a_0(editorContext, node);
  }
  private EditorCell createCollection_90yilf_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_90yilf_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createConstant_90yilf_a0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_90yilf_b0(editorContext, node));
    editorCell.addEditorCell(this.createRefCell_90yilf_c0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_90yilf_d0(editorContext, node));
    editorCell.addEditorCell(this.createTable_90yilf_e0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_90yilf_f0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_90yilf_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Name");
    editorCell.setCellId("Constant_90yilf_a0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_90yilf_b0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, ":");
    editorCell.setCellId("Constant_90yilf_b0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefCell_90yilf_c0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, editorContext);
    provider.setRole("facttype");
    provider.setNoTargetText("<no facttype>");
    EditorCell editorCell;
    provider.setAuxiliaryCellProvider(new ParameterTable_Editor._Inline_90yilf_a2a());
    editorCell = provider.createEditorCell(editorContext);
    if (editorCell.getRole() == null) {
      editorCell.setReferenceCell(true);
      editorCell.setRole("facttype");
    }
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  public static class _Inline_90yilf_a2a extends InlineCellProvider {
    public _Inline_90yilf_a2a() {
      super();
    }
    public EditorCell createEditorCell(EditorContext editorContext) {
      return this.createEditorCell(editorContext, this.getSNode());
    }
    public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
      return this.createProperty_90yilf_a0c0(editorContext, node);
    }
    private EditorCell createProperty_90yilf_a0c0(EditorContext editorContext, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
      provider.setRole("name");
      provider.setNoTargetText("<no name>");
      provider.setReadOnly(true);
      EditorCell editorCell;
      editorCell = provider.createEditorCell(editorContext);
      editorCell.setCellId("property_name");
      Style style = new StyleImpl();
      Styles_StyleSheet.apply_Name(style, editorCell);
      editorCell.getStyle().putAll(style);
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
        return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
      } else
      return editorCell;
    }
  }
  private EditorCell createConstant_90yilf_d0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_90yilf_d0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createTable_90yilf_e0(EditorContext editorContext, SNode node) {
    TableModelFactory creator = new TableModelFactory() {
      public TableModel createTableModel(final SNode node, final EditorContext editorContext) {
        return new AbstractTableModel() {
          @Override
          public int getColumnCount() {
            SNode ft;
            int i;
            ft = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x1fd9ba20c435f4ccL, 0x632aa0d511849836L, "facttype"));
            i = SLinkOperations.getChildren(ft, MetaAdapterFactory.getContainmentLink(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x48f33e893f656173L, 0x48f33e893f656174L, "roles")).size();
            return i;
          }
          @Override
          public int getRowCount() {
            int i = SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x1fd9ba20c435f4ccL, 0x1fd9ba20c443265aL, "factvalues")).size();
            return i + 1;
          }
          @Override
          public SNode getValueAt(int row, int column) {
            int ir = 1;
            int ic = 0;
            if (row > 0) {
              for (SNode fact : ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x1fd9ba20c435f4ccL, 0x1fd9ba20c443265aL, "factvalues")))) {
                if (ir == row) {
                  for (SNode role : ListSequence.fromList(SLinkOperations.getChildren(fact, MetaAdapterFactory.getContainmentLink(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x77865133b02ce20L, 0x12b785640357a393L, "values")))) {
                    if (column == ic) {
                      return role;
                    }
                    ic = ic + 1;
                  }
                  return null;
                }
                ir = ir + 1;
              }
              return null;
            }
            if (row == 0) {
              int ii = 0;
              SNode facttype;
              facttype = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x1fd9ba20c435f4ccL, 0x632aa0d511849836L, "facttype"));
              for (SNode role : ListSequence.fromList(SLinkOperations.getChildren(facttype, MetaAdapterFactory.getContainmentLink(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x48f33e893f656173L, 0x48f33e893f656174L, "roles")))) {
                if (column == ii) {
                  return role;
                }
                ii = ii + 1;
              }
              return null;
            }
            return null;
          }
          @Override
          public void createElement(int row, int column) {
            if (row > 0) {
              SNode fact = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x77865133b02ce21L, "GN.EN.structure.Fact")));
              SLinkOperations.setTarget(fact, MetaAdapterFactory.getReferenceLink(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x77865133b02ce20L, 0x77865133b2ca861L, "facttype"), SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x1fd9ba20c435f4ccL, 0x632aa0d511849836L, "facttype")));
              ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x1fd9ba20c435f4ccL, 0x1fd9ba20c443265aL, "factvalues"))).addElement(fact);
            }
          }
          public void DeleteElement(int row, int column) {
            int i = 0;
            if (row > 0) {
              for (SNode fv : ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x1fd9ba20c435f4ccL, 0x1fd9ba20c443265aL, "factvalues")))) {
                if ((row == i)) {
                  SNodeOperations.deleteNode(fv);
                }
                i = i + 1;
              }
            }
          }

          @Override
          public void insertColumn(int columnNumber) {
            if (columnNumber <= 0) {
              return;
            }
            SNode ft;
            ft = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x1fd9ba20c435f4ccL, 0x632aa0d511849836L, "facttype"));
            ListSequence.fromList(SLinkOperations.getChildren(ft, MetaAdapterFactory.getContainmentLink(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x48f33e893f656173L, 0x48f33e893f656174L, "roles"))).insertElement(columnNumber - 1, SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x48f33e893f5bee12L, "GN.EN.structure.Role")), null));
          }
          @Override
          public void insertRow(int rowNumber) {
            if (rowNumber <= 0) {
              return;
            }
            SNode fact;
            fact = SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x77865133b02ce21L, "GN.EN.structure.Fact")), null);
            SLinkOperations.setTarget(fact, MetaAdapterFactory.getReferenceLink(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x77865133b02ce20L, 0x77865133b2ca861L, "facttype"), SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x1fd9ba20c435f4ccL, 0x632aa0d511849836L, "facttype")));
            ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x1fd9ba20c435f4ccL, 0x1fd9ba20c443265aL, "factvalues"))).insertElement(rowNumber - 1, fact);
          }
          @Override
          public void deleteColumn(int columnNumber) {
            if (columnNumber <= 0) {
              return;
            }
          }
          @Override
          public void deleteRow(int rowNumber) {
          }
        };
      }
    };
    jetbrains.mps.openapi.editor.cells.EditorCell_Collection editorCell = EditorCell_Table.createTable(editorContext, node, creator.createTableModel(node, editorContext), "Table_90yilf_e0");
    editorCell.setCellId("Table_90yilf_e0_0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    return editorCell;
  }
  private EditorCell createConstant_90yilf_f0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_90yilf_f0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_90yilf_a_0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_90yilf_a_0");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createConstant_90yilf_a0_0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_90yilf_b0_0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_90yilf_c0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_90yilf_d0_0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_90yilf_e0(editorContext, node));
    editorCell.addEditorCell(this.createReadOnlyModelAccessor_90yilf_f0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_90yilf_g0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_90yilf_h0(editorContext, node));
    editorCell.addEditorCell(this.createRefNodeList_90yilf_i0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_90yilf_j0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_90yilf_k0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_90yilf_l0(editorContext, node));
    editorCell.addEditorCell(this.createReadOnlyModelAccessor_90yilf_m0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_90yilf_n0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_90yilf_o0(editorContext, node));
    editorCell.addEditorCell(this.createReadOnlyModelAccessor_90yilf_p0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_90yilf_q0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_90yilf_a0_0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "facttype");
    editorCell.setCellId("Constant_90yilf_a0_0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_90yilf_b0_0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, ":");
    editorCell.setCellId("Constant_90yilf_b0_0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_90yilf_c0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, editorContext);
    provider.setRole("facttype");
    provider.setNoTargetText("<no facttype>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    if (editorCell.getRole() == null) {
      editorCell.setRole("facttype");
    }
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createConstant_90yilf_d0_0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "roles");
    editorCell.setCellId("Constant_90yilf_d0_0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_90yilf_e0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, ":");
    editorCell.setCellId("Constant_90yilf_e0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createReadOnlyModelAccessor_90yilf_f0(final EditorContext editorContext, final SNode node) {
    EditorCell_Property editorCell = EditorCell_Property.create(editorContext, new ModelAccessor() {
      public String getText() {
        if (SNodeOperations.getNodeDescendants(SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x1fd9ba20c435f4ccL, 0x632aa0d511849836L, "facttype")), MetaAdapterFactory.getConcept(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x48f33e893f5bee12L, "GN.EN.structure.Role"), false, new SAbstractConcept[]{}).size() > 0) {
          return SNodeOperations.getNodeDescendants(SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x1fd9ba20c435f4ccL, 0x632aa0d511849836L, "facttype")), MetaAdapterFactory.getConcept(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x48f33e893f5bee12L, "GN.EN.structure.Role"), false, new SAbstractConcept[]{}).toString();
        }
        return "-";
      }
      public void setText(String s) {
      }
      public boolean isValidText(String s) {
        return EqualUtil.equals(s, getText());
      }
    }, node);
    editorCell.setAction(CellActionType.DELETE, EmptyCellAction.getInstance());
    editorCell.setAction(CellActionType.BACKSPACE, EmptyCellAction.getInstance());
    editorCell.setCellId("ReadOnlyModelAccessor_90yilf_f0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    return editorCell;
  }
  private EditorCell createConstant_90yilf_g0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "rows");
    editorCell.setCellId("Constant_90yilf_g0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_90yilf_h0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, ":");
    editorCell.setCellId("Constant_90yilf_h0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNodeList_90yilf_i0(EditorContext editorContext, SNode node) {
    AbstractCellListHandler handler = new ParameterTable_Editor.factvaluesListHandler_90yilf_i0(node, "factvalues", editorContext);
    EditorCell_Collection editorCell = handler.createCells(editorContext, new CellLayout_Indent(), false);
    editorCell.setCellId("refNodeList_factvalues");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, 0, true);
    style.set(StyleAttributes.INDENT_LAYOUT_CHILDREN_NEWLINE, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setRole(handler.getElementRole());
    return editorCell;
  }
  private static class factvaluesListHandler_90yilf_i0 extends RefNodeListHandler {
    public factvaluesListHandler_90yilf_i0(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }
    public SNode createNodeToInsert(EditorContext editorContext) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, editorContext, super.getElementRole());
    }
    public EditorCell createNodeCell(EditorContext editorContext, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(editorContext, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, editorContext);
      return elementCell;
    }
    public EditorCell createEmptyCell(EditorContext editorContext) {
      EditorCell emptyCell = null;
      emptyCell = super.createEmptyCell(editorContext);
      this.installElementCellActions(super.getOwner(), null, emptyCell, editorContext);
      return emptyCell;
    }
    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext editorContext) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        if (elementNode != null) {
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));
          elementCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteNode(elementNode));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), editorContext));
        }
      }
    }
  }
  private EditorCell createConstant_90yilf_j0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_90yilf_j0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_90yilf_k0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "number of rows");
    editorCell.setCellId("Constant_90yilf_k0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_90yilf_l0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, ":");
    editorCell.setCellId("Constant_90yilf_l0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createReadOnlyModelAccessor_90yilf_m0(final EditorContext editorContext, final SNode node) {
    EditorCell_Property editorCell = EditorCell_Property.create(editorContext, new ModelAccessor() {
      public String getText() {
        int i;
        i = SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x1fd9ba20c435f4ccL, 0x1fd9ba20c443265aL, "factvalues")).size();
        return String.valueOf(i);
      }
      public void setText(String s) {
      }
      public boolean isValidText(String s) {
        return EqualUtil.equals(s, getText());
      }
    }, node);
    editorCell.setAction(CellActionType.DELETE, EmptyCellAction.getInstance());
    editorCell.setAction(CellActionType.BACKSPACE, EmptyCellAction.getInstance());
    editorCell.setCellId("ReadOnlyModelAccessor_90yilf_m0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    return editorCell;
  }
  private EditorCell createConstant_90yilf_n0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "number of columns");
    editorCell.setCellId("Constant_90yilf_n0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_90yilf_o0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, ":");
    editorCell.setCellId("Constant_90yilf_o0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createReadOnlyModelAccessor_90yilf_p0(final EditorContext editorContext, final SNode node) {
    EditorCell_Property editorCell = EditorCell_Property.create(editorContext, new ModelAccessor() {
      public String getText() {
        int i;
        i = SNodeOperations.getNodeDescendants(SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x1fd9ba20c435f4ccL, 0x632aa0d511849836L, "facttype")), MetaAdapterFactory.getConcept(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x48f33e893f5bee12L, "GN.EN.structure.Role"), false, new SAbstractConcept[]{}).size();
        return String.valueOf(i);
      }
      public void setText(String s) {
      }
      public boolean isValidText(String s) {
        return EqualUtil.equals(s, getText());
      }
    }, node);
    editorCell.setAction(CellActionType.DELETE, EmptyCellAction.getInstance());
    editorCell.setAction(CellActionType.BACKSPACE, EmptyCellAction.getInstance());
    editorCell.setCellId("ReadOnlyModelAccessor_90yilf_p0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    return editorCell;
  }
  private EditorCell createConstant_90yilf_q0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_90yilf_q0");
    editorCell.setDefaultText("");
    return editorCell;
  }
}
