package GN.EN.DateTime.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {

  public Collection<ConceptEditor> getEditors(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0b, descriptor.getConceptFqName())) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new AbsoluteInterval_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new After_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new AfterInstant_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new AfterInterval_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Before_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new BeforeInstant_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new BeforeInterval_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new Between_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new DateValue_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new DayValue_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new Days_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new Duration_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new During_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new Equal_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new Friday_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new HourValue_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new Hours_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new InstantDateValue_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new InstantVariable_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new Interval_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new IntervalVariable_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new IsLongerThan_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new IsLongerThanOrEqualTo_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new IsShorterThan_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new IsShorterThanOrEqualTo_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new IsTheSameInstantAs_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new MinuteValue_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new Minutes_Editor());
      case 28:
        return Collections.<ConceptEditor>singletonList(new Monday_Editor());
      case 29:
        return Collections.<ConceptEditor>singletonList(new MonthValue_Editor());
      case 30:
        return Collections.<ConceptEditor>singletonList(new Months_Editor());
      case 31:
        return Collections.<ConceptEditor>singletonList(new Now_Editor());
      case 32:
        return Collections.<ConceptEditor>singletonList(new Saturday_Editor());
      case 33:
        return Collections.<ConceptEditor>singletonList(new Seconds_Editor());
      case 34:
        return Collections.<ConceptEditor>singletonList(new Sunday_Editor());
      case 35:
        return Collections.<ConceptEditor>singletonList(new Thursday_Editor());
      case 36:
        return Collections.<ConceptEditor>singletonList(new TimeValue_Editor());
      case 37:
        return Collections.<ConceptEditor>singletonList(new Tuesday_Editor());
      case 38:
        return Collections.<ConceptEditor>singletonList(new Wednesday_Editor());
      case 39:
        return Collections.<ConceptEditor>singletonList(new YearValue_Editor());
      case 40:
        return Collections.<ConceptEditor>singletonList(new Years_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }
  public Collection<ConceptEditorComponent> getEditorComponents(ConceptDescriptor descriptor, String editorComponentId) {
    return Collections.<ConceptEditorComponent>emptyList();
  }


  private static String[] stringSwitchCases_xbvbvu_a0a0b = new String[]{"GN.EN.DateTime.structure.AbsoluteInterval", "GN.EN.DateTime.structure.After", "GN.EN.DateTime.structure.AfterInstant", "GN.EN.DateTime.structure.AfterInterval", "GN.EN.DateTime.structure.Before", "GN.EN.DateTime.structure.BeforeInstant", "GN.EN.DateTime.structure.BeforeInterval", "GN.EN.DateTime.structure.Between", "GN.EN.DateTime.structure.DateValue", "GN.EN.DateTime.structure.DayValue", "GN.EN.DateTime.structure.Days", "GN.EN.DateTime.structure.Duration", "GN.EN.DateTime.structure.During", "GN.EN.DateTime.structure.Equal", "GN.EN.DateTime.structure.Friday", "GN.EN.DateTime.structure.HourValue", "GN.EN.DateTime.structure.Hours", "GN.EN.DateTime.structure.InstantDateValue", "GN.EN.DateTime.structure.InstantVariable", "GN.EN.DateTime.structure.Interval", "GN.EN.DateTime.structure.IntervalVariable", "GN.EN.DateTime.structure.IsLongerThan", "GN.EN.DateTime.structure.IsLongerThanOrEqualTo", "GN.EN.DateTime.structure.IsShorterThan", "GN.EN.DateTime.structure.IsShorterThanOrEqualTo", "GN.EN.DateTime.structure.IsTheSameInstantAs", "GN.EN.DateTime.structure.MinuteValue", "GN.EN.DateTime.structure.Minutes", "GN.EN.DateTime.structure.Monday", "GN.EN.DateTime.structure.MonthValue", "GN.EN.DateTime.structure.Months", "GN.EN.DateTime.structure.Now", "GN.EN.DateTime.structure.Saturday", "GN.EN.DateTime.structure.Seconds", "GN.EN.DateTime.structure.Sunday", "GN.EN.DateTime.structure.Thursday", "GN.EN.DateTime.structure.TimeValue", "GN.EN.DateTime.structure.Tuesday", "GN.EN.DateTime.structure.Wednesday", "GN.EN.DateTime.structure.YearValue", "GN.EN.DateTime.structure.Years"};
}
