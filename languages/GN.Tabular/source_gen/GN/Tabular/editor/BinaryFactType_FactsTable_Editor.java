package GN.Tabular.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import java.util.Collection;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import GN.EN.editor.Styles_StyleSheet;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.lang.editor.table.runtime.TableModelFactory;
import jetbrains.mps.lang.editor.table.runtime.TableModel;
import jetbrains.mps.lang.editor.table.runtime.AbstractTableModel;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.editor.table.runtime.EditorCell_Table;

public class BinaryFactType_FactsTable_Editor extends DefaultNodeEditor {
  private Collection<String> myContextHints = Arrays.asList(new String[]{"GN.EN.editor.GN.FactsTable"});
  @Override
  public Collection<String> getContextHints() {
    return myContextHints;
  }
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_mgl12_a(editorContext, node);
  }
  private EditorCell createCollection_mgl12_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_mgl12_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createConstant_mgl12_a0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_mgl12_b0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_mgl12_c0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_mgl12_d0(editorContext, node));
    editorCell.addEditorCell(this.createTable_mgl12_e0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_mgl12_f0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_mgl12_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "binary fact type");
    editorCell.setCellId("Constant_mgl12_a0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_mgl12_b0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("name");
    provider.setNoTargetText("<no name>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_name");
    Style style = new StyleImpl();
    Styles_StyleSheet.apply_Name(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createConstant_mgl12_c0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_mgl12_c0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.MATCHING_LABEL, 0, "body-brace");
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_mgl12_d0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_mgl12_d0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createTable_mgl12_e0(EditorContext editorContext, SNode node) {
    TableModelFactory creator = new TableModelFactory() {
      public TableModel createTableModel(final SNode node, final EditorContext editorContext) {
        return new AbstractTableModel() {
          @Override
          public int getColumnCount() {
            return 2;
          }
          @Override
          public int getRowCount() {
            int i = 1;
            List<SNode> factlist;
            factlist = SNodeOperations.getNodeDescendants(SNodeOperations.getParent(node), MetaAdapterFactory.getConcept(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x77865133b02ce21L, "GN.EN.structure.Fact"), false, new SAbstractConcept[]{});
            for (SNode Fact : ListSequence.fromList(factlist)) {
              if (SNodeOperations.getConcept(SLinkOperations.getTarget(Fact, MetaAdapterFactory.getReferenceLink(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x77865133b02ce20L, 0x77865133b2ca861L, "facttype"))) == SNodeOperations.getConcept(node)) {
                i = i + 1;
              }
            }
            return i;
          }
          @Override
          public SNode getValueAt(int row, int column) {
            if (row > 0 && column == 0) {
              int i = 0;
              List<SNode> factlist;
              factlist = SNodeOperations.getNodeDescendants(SNodeOperations.getParent(node), MetaAdapterFactory.getConcept(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x77865133b02ce21L, "GN.EN.structure.Fact"), false, new SAbstractConcept[]{});
              for (SNode Fact : ListSequence.fromList(factlist)) {
                if (SNodeOperations.getConcept(SLinkOperations.getTarget(Fact, MetaAdapterFactory.getReferenceLink(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x77865133b02ce20L, 0x77865133b2ca861L, "facttype"))) == SNodeOperations.getConcept(node)) {
                  i = i + 1;
                  if (i == row) {
                    return ListSequence.fromList(SLinkOperations.getChildren(Fact, MetaAdapterFactory.getContainmentLink(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x77865133b02ce20L, 0x12b785640357a393L, "values"))).getElement(0);
                  }
                }
              }
            }
            if (row > 0 && column == 1) {
              int i = 0;
              List<SNode> factlist;
              factlist = SNodeOperations.getNodeDescendants(SNodeOperations.getParent(node), MetaAdapterFactory.getConcept(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x77865133b02ce21L, "GN.EN.structure.Fact"), false, new SAbstractConcept[]{});
              for (SNode Fact : ListSequence.fromList(factlist)) {
                if (SNodeOperations.getConcept(SLinkOperations.getTarget(Fact, MetaAdapterFactory.getReferenceLink(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x77865133b02ce20L, 0x77865133b2ca861L, "facttype"))) == SNodeOperations.getConcept(node)) {
                  i = i + 1;
                  if (i == row) {
                    return ListSequence.fromList(SLinkOperations.getChildren(Fact, MetaAdapterFactory.getContainmentLink(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x77865133b02ce20L, 0x12b785640357a393L, "values"))).getElement(1);
                  }
                }
              }
            }

            if (row == 0 && column == 0) {
              return SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x48f33e893f6480ffL, 0x48f33e893f648103L, "role1"));
            }

            if (row == 0 && column == 1) {
              return SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x5e1c5a020383495cL, 0x8688687a5f581193L, 0x48f33e893f6480ffL, 0x48f33e893f648106L, "role2"));
            }

            return null;
          }
          @Override
          public void createElement(int row, int column) {
          }
          @Override
          public void insertColumn(int columnNumber) {
          }
          @Override
          public void insertRow(int rowNumber) {
          }
          @Override
          public void deleteColumn(int columnNumber) {
            if (columnNumber <= 0) {
              return;
            }
          }
          @Override
          public void deleteRow(int rowNumber) {
          }
        };
      }
    };
    jetbrains.mps.openapi.editor.cells.EditorCell_Collection editorCell = EditorCell_Table.createTable(editorContext, node, creator.createTableModel(node, editorContext), "Table_mgl12_e0");
    editorCell.setCellId("Table_mgl12_e0_0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    return editorCell;
  }
  private EditorCell createConstant_mgl12_f0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_mgl12_f0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
}
