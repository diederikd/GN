package GN.NL.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {

  public Collection<ConceptEditor> getEditors(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0b, descriptor.getConceptFqName())) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new ActType_NL_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new AdditionSubstractionRule_NL_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new BinaryFactType_NL_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new Characteristic_NL_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new ClaimDuty_NL_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new ClassifyAssertionAsFact_NL_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new Concept_NL_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new DisabilityImmunity_NL_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new DutyClaim_NL_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new EventRule_NL_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new EventType_NL_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new ImmunityDisability_NL_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new InteractionContext_NL_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new LegalContext_NL_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new LiabilityPower_NL_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new NoRightPrivilege_NL_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new Object_NL_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new PowerLiability_NL_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new PrivilegeNoRight_NL_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new ReferenceContext_NL_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new SpecialisationRule_NL_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new Subject_NL_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new VariableDefinition_NL_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }
  public Collection<ConceptEditorComponent> getEditorComponents(ConceptDescriptor descriptor, String editorComponentId) {
    return Collections.<ConceptEditorComponent>emptyList();
  }


  private static String[] stringSwitchCases_xbvbvu_a0a0b = new String[]{"GN.EN.structure.ActType", "GN.EN.structure.AdditionSubstractionRule", "GN.EN.structure.BinaryFactType", "GN.EN.structure.Characteristic", "GN.EN.structure.ClaimDuty", "GN.EN.structure.ClassifyAssertionAsFact", "GN.EN.structure.Concept", "GN.EN.structure.DisabilityImmunity", "GN.EN.structure.DutyClaim", "GN.EN.structure.EventRule", "GN.EN.structure.EventType", "GN.EN.structure.ImmunityDisability", "GN.EN.structure.InteractionContext", "GN.EN.structure.LegalContext", "GN.EN.structure.LiabilityPower", "GN.EN.structure.NoRightPrivilege", "GN.EN.structure.Object", "GN.EN.structure.PowerLiability", "GN.EN.structure.PrivilegeNoRight", "GN.EN.structure.ReferenceContext", "GN.EN.structure.SpecialisationRule", "GN.EN.structure.Subject", "GN.EN.structure.VariableDefinition"};
}
